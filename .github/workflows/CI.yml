# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License").
# You may not use this file except in compliance with the License.
# A copy of the License is located at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# or in the "license" file accompanying this file. This file is distributed
# on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
# express or implied. See the License for the specific language governing
# permissions and limitations under the License.

name: C/I
on:
  workflow_dispatch:
  # from collector and contrib repo
  repository_dispatch:
    types: [dependency-build, workflow-run]

env:
  IMAGE_NAME: aws-otel-collector
  PACKAGING_ROOT: build/packages
  ECR_REPO: aws-otel-test/adot-collector-integration-test
  # TF_VAR_patch: 'true'
  PKG_SIGN_PRIVATE_KEY_NAME: aoc-linux-pkg-signing-gpg-key
  WIN_UNSIGNED_PKG_BUCKET: aoc-aws-signer-unsigned-artifact-src
  WIN_SIGNED_PKG_BUCKET: aoc-aws-signer-signed-artifact-dest
  WIN_UNSIGNED_PKG_FOLDER: OTelCollectorAuthenticode/AuthenticodeSigner-SHA256-RSA
  WIN_SIGNED_PKG_FOLDER: OTelCollectorAuthenticode/AuthenticodeSigner-SHA256-RSA
  SSM_PACKAGE_NAME: "testAWSDistroOTel-Collector"
  EKS_ARM_64_AMP_ENDPOINT: "https://aps-workspaces.us-west-2.amazonaws.com/workspaces/ws-e0c3c74f-7fdf-4e90-87d2-a61f52df40cd"
  EKS_ARM_64_CLUSTER_NAME: "collector-ci-arm64-1-21"
  EKS_ARM_64_REGION: "us-west-2"
  TESTING_FRAMEWORK_REPO: bryan-aguilar/aws-otel-test-framework
  GITHB_RUN_ID: ${{ github.run_id }}
  # ignore batch testing for hackathon
  #DDB_TABLE_NAME: BatchTestCache
  MAX_JOBS: 1
  BATCH_INCLUDED_SERVICES: EKS,EKS_ARM64
  GO_VERSION: ~1.20.2
  TF_VAR_aoc_version: "v0.26.2"
  TF_VAR_aoc_image_repo: "public.ecr.aws/aws-observability/aws-otel-collector"
  TF_VAR_cortex_instance_endpoint: "https://aps-workspaces.us-west-2.amazonaws.com/workspaces/ws-b50bd41b-b9e0-4211-9336-ff19ed9fd355"


concurrency:
  group: ci-batched${{ github.ref_name }}
  cancel-in-progress: true

permissions:
  id-token: write
  contents: read

jobs:
  create-test-ref:
    runs-on: ubuntu-latest
    outputs:
      testRef: ${{ steps.setRef.outputs.ref }}
    steps:
      - name: Set testRef output
        id: setRef
        run: |
          if [[ ${{ github.ref_name }} == release/v* ]]; then 
            echo "ref=${{github.ref_name}}" >> $GITHUB_OUTPUT
          else
            echo "ref=q1hack2023" >> $GITHUB_OUTPUT
          fi

  build-aotutil:
    runs-on: ubuntu-latest
    needs: create-test-ref
    steps:
      - name: Check out testing framework
        uses: actions/checkout@v3
        with:
          repository: ${{ env.TESTING_FRAMEWORK_REPO }}
          path: testing-framework
          ref: ${{ needs.create-test-ref.outputs.testRef }}
      - name: Set up Go 1.x
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Build aotutil
        run: cd testing-framework/cmd/aotutil && make build
      - name: Cache aotutil
        uses: actions/cache@v3
        with:
          key: "aotutil_${{ hashFiles('testing-framework/cmd/aotutil/*.go') }}_${{ hashFiles('testing-framework/cmd/aotutil/go.sum') }}"
          path: testing-framework/cmd/aotutil/aotutil

  get-testing-suites: 
    runs-on: ubuntu-latest
    needs: [create-test-ref]
    outputs:
      test-case-batch-key: ${{ steps.set-batches.outputs.batch-keys }}
      test-case-batch-value: ${{ steps.set-batches.outputs.batch-values }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          repository: ${{ env.TESTING_FRAMEWORK_REPO }}
          path: testing-framework
          ref: ${{ needs.create-test-ref.outputs.testRef }}

      - name: Set up Go 1.x
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

        # getting the batches would look something like this
        # max jobs could be read as env or passed in as arg depending
        # on how tool is written. 
      - name: Create test batch key values
        id: set-batches
        run: |
          cd testing-framework/tools/batchTestGenerator
          go build
          ./batchTestGenerator github --testCaseFilePath=./testcases.json --maxBatch=${{ env.MAX_JOBS }} \
            --include=${{ env.BATCH_INCLUDED_SERVICES }}
      - name: List testing suites
        run: |
          echo ${{ steps.set-batches.outputs.batch-keys }}
          echo ${{ steps.set-batches.outputs.batch-values }}

  run-batch-job:
    runs-on: ubuntu-latest
    needs: [get-testing-suites, create-test-ref, build-aotutil]
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.get-testing-suites.outputs.test-case-batch-key) }}

    steps:
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '11'

      - name: Set up terraform
        uses: hashicorp/setup-terraform@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          role-to-assume: ${{ secrets.COLLECTOR_ASSUMABLE_ROLE_ARN }}
          aws-region: us-west-2
          # 6 hours
          role-duration-seconds: 21600
      
      - name: Checkout testing framework
        uses: actions/checkout@v3
        with:
          repository: ${{ env.TESTING_FRAMEWORK_REPO }}
          path: testing-framework
          ref: ${{ needs.create-test-ref.outputs.testRef }}

      - name: create test-case-batch file
        run: |
          jsonStr='${{ needs.get-testing-suites.outputs.test-case-batch-value }}'
          jsonStr="$(jq -r '.${{ matrix.BatchKey }} | join("\n")' <<< "${jsonStr}")"
          echo "$jsonStr" >> testing-framework/terraform/test-case-batch
          cat testing-framework/terraform/test-case-batch
      - name: Get TTL_DATE for cache
        id: date
        run: echo "ttldate=$(date -u -d "+7 days" +%s)" >> $GITHUB_OUTPUT

      - name: Restore aotutil
        uses: actions/cache@v3
        with:
          key: "aotutil_${{ hashFiles('testing-framework/cmd/aotutil/*.go') }}_${{ hashFiles('testing-framework/cmd/aotutil/go.sum') }}"
          path: testing-framework/cmd/aotutil/aotutil

      - name: run tests
        run: |
          export TTL_DATE=${{ steps.date.outputs.ttldate }}
          cd testing-framework/terraform
          make execute-batch-test
          
      - name: output cache misses
        if: ${{ failure() }}
        run: |
          cd testing-framework/terraform
          make checkCacheHits
      
      # This is here just in case workflow cancel
      # We first kill terraform processes to ensure that no state
      # file locks are being held from SIGTERMS dispatched in previous
      # steps. 
      - name: Destroy resources
        if: ${{ cancelled() }}
        shell: bash {0}
        run: |
          ps -ef | grep terraform | grep -v grep | awk '{print $2}' | xargs -n 1 kill
          cd testing-framework/terraform
          make terraformCleanup

  validate-all-tests-pass:
    runs-on: ubuntu-latest
    needs: [run-batch-job,create-test-ref,get-testing-suites]
    if: always()
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          repository: ${{ env.TESTING_FRAMEWORK_REPO }}
          path: testing-framework
          ref: ${{ needs.create-test-ref.outputs.testRef }}

      - name: Set up Go 1.x
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          role-to-assume: ${{ secrets.COLLECTOR_ASSUMABLE_ROLE_ARN }}
          aws-region: us-west-2

      # combine all test-case-batch values
      - name: create test-case-batch file
        run: |
          jsonStr='${{ needs.get-testing-suites.outputs.test-case-batch-value }}'
          jsonStr="$(jq -r '.[] | join("\n")' <<< "${jsonStr}")"
          echo "$jsonStr" >> testing-framework/terraform/test-case-batch
          cat testing-framework/terraform/test-case-batch

      - name: output cache misses
        run: |
          export TF_VAR_aoc_version=${{ needs.e2etest-preparation.outputs.version }}
          cd testing-framework/terraform
          make checkCacheHits

